# coding: utf-8

"""
    Home Connect API

    This API provides access to home appliances enabled by Home Connect (https://home-connect.com). Through the API programs can be started and stopped, or home appliances configured and monitored. For instance, you can start a cotton program on a washer and get a notification when the cycle is complete.  To get started with this web client, visit https://developer.home-connect.com and register an account. An application with a client ID for this API client will be automatically generated for you.  In order to use this API in your own client, you need an OAuth 2 client implementing the authorization code grant flow (https://developer.home-connect.com/docs/authorization/flow).   More details can be found here: https://www.rfc-editor.org/rfc/rfc6749.txt  Authorization URL: https://api.home-connect.com/security/oauth/authorize  Token URL: https://api.home-connect.com/security/oauth/token   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from home_connect_api.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_home_appliances(self, **kwargs):  # noqa: E501
        """Get all home appliances which are paired with the logged-in user account.  # noqa: E501

        This endpoint returns a list of all home appliances which are paired with the logged-in user account. All paired home appliances are returned independent of their current connection state. The connection state can be retrieved within the field 'connected' of the respective home appliance. The haId is the primary access key for further API access to a specific home appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_appliances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ArrayOfHomeAppliances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_home_appliances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_home_appliances_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_home_appliances_with_http_info(self, **kwargs):  # noqa: E501
        """Get all home appliances which are paired with the logged-in user account.  # noqa: E501

        This endpoint returns a list of all home appliances which are paired with the logged-in user account. All paired home appliances are returned independent of their current connection state. The connection state can be retrieved within the field 'connected' of the respective home appliance. The haId is the primary access key for further API access to a specific home appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_appliances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ArrayOfHomeAppliances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_home_appliances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.bsh.sdk.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['homeconnect_auth']  # noqa: E501

        return self.api_client.call_api(
            '/homeappliances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfHomeAppliances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_specific_appliance(self, haid, **kwargs):  # noqa: E501
        """Get a specfic home appliances which are paired with the logged-in user account.  # noqa: E501

        This endpoint returns a specific home appliance which is paired with the logged-in user account. It is returned independent of their current connection state. The connection state can be retrieved within the field 'connected' of the respective home appliance. The haId is the primary access key for further API access to a specific home appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_specific_appliance(haid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str haid: ID of home appliance (required)
        :return: HomeAppliance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_specific_appliance_with_http_info(haid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_specific_appliance_with_http_info(haid, **kwargs)  # noqa: E501
            return data

    def get_specific_appliance_with_http_info(self, haid, **kwargs):  # noqa: E501
        """Get a specfic home appliances which are paired with the logged-in user account.  # noqa: E501

        This endpoint returns a specific home appliance which is paired with the logged-in user account. It is returned independent of their current connection state. The connection state can be retrieved within the field 'connected' of the respective home appliance. The haId is the primary access key for further API access to a specific home appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_specific_appliance_with_http_info(haid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str haid: ID of home appliance (required)
        :return: HomeAppliance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['haid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_specific_appliance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'haid' is set
        if ('haid' not in params or
                params['haid'] is None):
            raise ValueError("Missing the required parameter `haid` when calling `get_specific_appliance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'haid' in params:
            path_params['haid'] = params['haid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.bsh.sdk.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['homeconnect_auth']  # noqa: E501

        return self.api_client.call_api(
            '/homeappliances/{haid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomeAppliance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
